Map.html 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Viewer with Markers</title>
    <script src="https://openseadragon.github.io/openseadragon/openseadragon.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        #viewer {
            width: 90%;
            height: 80vh;
            border: 1px solid #ccc;
            position: relative;
        }

        .marker {
            position: absolute;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            transform: translate(-50%, -50%);
            cursor: pointer;
        }

        .marker-tooltip {
            display: none;
            position: absolute;
            background-color: #333;
            color: #fff;
            padding: 5px;
            border-radius: 5px;
            font-size: 12px;
            white-space: nowrap;
        }

        .marker:hover .marker-tooltip {
            display: block;
            top: -20px;
            left: 15px;
        }

        .color-selection {
            margin: 10px;
            display: flex;
            gap: 10px;
        }

        .color-selection label {
            cursor: pointer;
        }

        .color-selection input[type="radio"] {
            margin-right: 5px;
        }

        .title {
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <h1>مكتب عقـــارات كوجــر</h1>

    <!-- Color Selection Section -->
    <div class="color-selection">
        <label><input type="radio" name="markerColor" value="red" checked>لون الاحمــر  : لبيع</label>
        <label><input type="radio" name="markerColor" value="blue"> Blue</label>
        <label><input type="radio" name="markerColor" value="green"> Green</label>
        <label><input type="radio" name="markerColor" value="black"> Black</label>
    </div>

    <div class="title">
        <p>Welcome To Kocher Real Estate</p>
    </div>

    <div id="viewer"></div>

    <script>
        // Initialize OpenSeadragon viewer
        let viewer = OpenSeadragon({
            id: "viewer",
            prefixUrl: "https://openseadragon.github.io/openseadragon/images/",
            tileSources: {
                type: 'image',
                url: "image/compressed_output.JPG"
            },
            showNavigator: true,
            animationTime: 0.5,
            blendTime: 0.1,
            constrainDuringPan: true,
            maxZoomPixelRatio: 2,
            minZoomImageRatio: 0.5,
            zoomPerClick: 2,
        });
    
        // To store marker data in memory
        const markers = [];
    
        // Function to get selected color for markers
        function getSelectedColor() {
            const colorInput = document.querySelector('input[name="markerColor"]:checked');
            return colorInput ? colorInput.value : "red"; // Default to red
        }
    
        // Function to save marker to database
        async function saveMarkerToDatabase(marker) {
    console.log("Sending marker data:", marker);  // Add this line to debug
    try {
        const response = await fetch('http://localhost:3000/save-maping', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(marker)
        });
        const result = await response.json();
        console.log(result.message);
    } catch (error) {
        console.error('Error saving marker:', error);
    }
}

    
        // Function to load markers from the database
        async function loadMarkersFromDatabase() {
            try {
                const response = await fetch('http://localhost:3000/get-markers');
                const markersFromDb = await response.json();
                markersFromDb.forEach(markerData => {
                    createMarker(markerData.x_coordinate, markerData.y_coordinate, markerData.tooltip, markerData.color, false);
                });
            } catch (error) {
                console.error('Error loading markers:', error);
            }
        }
    
        // Function to create a marker
        function createMarker(x, y, tooltipText, color, save = true) {
            const marker = document.createElement("div");
            marker.classList.add("marker");
            marker.dataset.x = x;
            marker.dataset.y = y;
            marker.style.backgroundColor = color;
    
            // Tooltip for the marker
            if (tooltipText) {
                const tooltip = document.createElement("div");
                tooltip.classList.add("marker-tooltip");
                tooltip.textContent = tooltipText;
                marker.appendChild(tooltip);
            }
    
            // Marker click handler to delete the marker
            marker.addEventListener("click", (e) => {
                e.stopPropagation();
                const confirmDelete = confirm("Do you want to delete this marker?");
                if (confirmDelete) {
                    deleteMarker(marker);
                }
            });
    
            // Append the marker to the viewer
            document.getElementById("viewer").appendChild(marker);
            updateMarkerPosition(marker);
    
            // Save to the database if needed
            if (save) {
                const markerData = { x, y, tooltip: tooltipText, color };
                saveMarkerToDatabase(markerData); // Save to database
            }
        }
    
        // Function to delete a marker
       // Function to delete a marker
// Function to delete a marker
function deleteMarker(marker) {
    const x = parseFloat(marker.dataset.x); // Get x-coordinate of the marker
    const y = parseFloat(marker.dataset.y); // Get y-coordinate of the marker

    // Find the marker in the markers array (this is your "memory")
    const markerIndex = markers.findIndex(
        m => m.x === x && m.y === y
    );

    if (markerIndex > -1) {
        // Remove from memory (markers array)
        markers.splice(markerIndex, 1);
        saveMarkersToLocalStorage(); // Update localStorage with the modified markers array
    }

    // Call the function to delete the marker from the database
    deleteMarkerFromDatabase(x, y);

    // Remove from the DOM
    marker.remove();
}

function deleteMarkerFromDatabase(x, y) {
    // Round to 3 decimal places before sending
    const roundedX = Math.round(x * 1000) / 1000;
    const roundedY = Math.round(y * 1000) / 1000;

    console.log('Rounded coordinates sent to server:', { x: roundedX, y: roundedY });

    fetch('http://localhost:3000/delete-marker', {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ x: roundedX, y: roundedY })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to delete marker from database');
        }
        return response.json();
    })
    .then(data => {
        if (data.message === 'Marker deleted successfully') {
            console.log('Marker successfully deleted from database');
        } else {
            console.error('Error deleting marker from database:', data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
    });
}




// Function to update the markers in localStorage
function saveMarkersToLocalStorage() {
    localStorage.setItem('markers', JSON.stringify(markers));
}

    
        // Function to update the marker position based on viewer coordinates
        function updateMarkerPosition(marker) {
            const imagePoint = new OpenSeadragon.Point(
                parseFloat(marker.dataset.x),
                parseFloat(marker.dataset.y)
            );
            const viewportPoint = viewer.viewport.imageToViewportCoordinates(imagePoint);
            const pixelPoint = viewer.viewport.viewportToViewerElementCoordinates(viewportPoint);
    
            marker.style.left = `${pixelPoint.x}px`;
            marker.style.top = `${pixelPoint.y}px`;
        }
    
        // Add marker to the map when clicked
        function addMarker(imagePoint) {
            const tipText = prompt("Enter a tip for this marker:");
            if (tipText === null || tipText === "") return; // Cancel adding marker if no input
    
            const color = getSelectedColor(); // Get selected color
            createMarker(imagePoint.x, imagePoint.y, tipText, color);
        }
    
        // Handler for canvas clicks to create markers
        viewer.addHandler("canvas-click", (event) => {
            const viewportPoint = viewer.viewport.pointFromPixel(event.position);
            const imagePoint = viewer.viewport.viewportToImageCoordinates(viewportPoint);
            addMarker(imagePoint);
        });
    
        // Keep markers positioned correctly on viewport changes
        viewer.addHandler("viewport-change", () => {
            document.querySelectorAll(".marker").forEach(updateMarkerPosition);
        });
    
        // Load markers from the database when the viewer is opened
        viewer.addHandler("open", () => {
            loadMarkersFromDatabase();
        });
    </script>
    
</body>
</html>

/////////////////////
Server.js
// server.js

const express = require('express');
const mysql = require('mysql2/promise');  // Use promise-based version
const bcrypt = require('bcryptjs');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const port = 3000;

app.use(cors());
// Middleware to parse JSON bodies
app.use(bodyParser.json());

// Create MySQL connection - Use async function to handle connection
let db;

async function connectDB() {
  try {
    // Create a connection with the database using mysql2/promise
    db = await mysql.createConnection({
      host: 'localhost',
      user: 'root',
      password: '',
      database: 'db1'
    });
    console.log('Connected to MySQL');
  } catch (err) {
    console.error('Error connecting to MySQL:', err);
    process.exit(1);  // Stop the server if connection fails
  }
}

// Register Route
app.post('/register', (req, res) => {
  const { fullname, username, password } = req.body;

  // Hash the password
  bcrypt.hash(password, 10, (err, hashedPassword) => {
    if (err) {
      return res.status(500).json({ error: 'Error hashing password' });
    }

    // Insert into the database
    db.query(
      'INSERT INTO USERS (fullname, username, password) VALUES (?, ?, ?)',
      [fullname, username, hashedPassword],
      (err, result) => {
        if (err) {
          return res.status(500).json({ error: 'Database error during registration' });
        }
        res.status(201).json({ message: 'User registered successfully' });
      }
    );
  });
});

// Login Route
app.post('/login', (req, res) => {
  const { username, password } = req.body;

  // Check if the username exists
  db.query(
    'SELECT * FROM USERS WHERE username = ?',
    [username],
    (err, result) => {
      if (err) {
        return res.status(500).json({ error: 'Database error during login' });
      }

      if (result.length === 0) {
        return res.status(400).json({ error: 'User not found' });
      }

      // Compare password
      const user = result[0];
      bcrypt.compare(password, user.password, (err, isMatch) => {
        if (err) {
          return res.status(500).json({ error: 'Error comparing password' });
        }

        if (!isMatch) {
          return res.status(400).json({ error: 'Invalid credentials' });
        }

        res.status(200).json({ message: 'Login successful' });
      });
    }
  );
});

app.post('/save-maping', (req, res) => {
    const { x, y, tooltip, color } = req.body;

    // Ensure you are getting the data correctly
    console.log(req.body);

    // Assuming you are using MySQL to insert the data
    const query = "INSERT INTO marker (x_coordinate, y_coordinate, tooltip, color) VALUES (?, ?, ?, ?)";
    db.query(query, [x, y, tooltip, color], (err, result) => {
        if (err) {
            console.error(err);
            return res.status(500).json({ message: 'Error saving marker', error: err });
        }
        res.status(200).json({ message: 'Marker saved successfully', markerId: result.insertId });
    });
});

// API endpoint to load markers
// Endpoint to fetch all markers from the database
app.get('/get-markers', async (req, res) => {
    try {
        const [rows] = await db.query('SELECT * FROM marker');
        res.json(rows);  // Send the marker data as a response
    } catch (error) {
        console.error('Error fetching markers:', error);
        res.status(500).json({ message: 'Error fetching markers', error });
    }
});
// Endpoint to delete a marker from the database
// DELETE endpoint to remove a marker by coordinates (x, y)
// DELETE endpoint to delete a marker from the database
// DELETE endpoint to delete a marker
app.delete('/delete-marker', async (req, res) => {
    const { x, y } = req.body;

    console.log('Received coordinates:', { x, y }); // Debugging

    try {
        // Use ROUND in SQL query for both x_coordinate and y_coordinate
        const marker = await db.query(
            `SELECT id 
             FROM marker 
             WHERE ROUND(x_coordinate, 3) = ROUND(?, 3) 
               AND ROUND(y_coordinate, 3) = ROUND(?, 3)`,
            [x, y]
        );

        console.log('SQL Result:', marker); // Debugging SQL result

        if (marker.length === 0) {
            return res.status(404).json({ message: 'Marker not found' });
        }

        const markerId = marker[0].id;

        await db.query('DELETE FROM marker WHERE id = ?', [markerId]);

        console.log('Marker deleted successfully, ID:', markerId);
        res.json({ message: 'Marker deleted successfully' });
    } catch (error) {
        console.error('Error deleting marker:', error);
        res.status(500).json({ message: 'Error deleting marker' });
    }
});







// Endpoint to fetch marker counts by color
app.get('/get-marker-counts', async (req, res) => {
    try {
        const [rows] = await db.query(
            `SELECT 
                (SELECT COUNT(*) FROM marker WHERE color = 'red') AS red_count,
                (SELECT COUNT(*) FROM marker WHERE color = 'blue') AS blue_count,
                (SELECT COUNT(*) FROM marker WHERE color = 'black') AS black_count,
                (SELECT COUNT(*) FROM marker WHERE color = 'green') AS green_count`
        );

        // The result rows[0] should contain the counts as expected
        res.json({
            red_count: rows[0].red_count,
            blue_count: rows[0].blue_count,
            black_count: rows[0].black_count,
            green_count: rows[0].green_count
        });
    } catch (error) {
        console.error('Database Error:', error);
        res.status(500).json({ message: 'Error fetching marker counts', error: error.message });
    }
});

// Start server after DB connection
connectDB().then(() => {
  app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
  });
});
/////////////////
        .marker {
            position: absolute;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            transform: translate(-50%, -50%);
            cursor: pointer;
        }

        .marker-tooltip {
    display: none;
    position: absolute;
    background-color: #333;
    color: #f7e5e5;
    padding: 10px; /* Increased padding for better spacing */
    border-radius: 5px;
    font-size: 12px;
    white-space: pre-wrap; /* Allow wrapping and preserve newlines */
    width: auto; /* Adjust as needed or set a fixed width if required */
    max-width: 200px; /* Optional: Limit the width for readability */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Optional: Add a subtle shadow */
}

/// Endpoint get marker to Dashboard page
<script>
    // Fetch counts from API
    $.ajax({
    url: 'http://localhost:3000/get-marker-counts',
    method: 'GET',
    success: function(data) {
      console.log('Data received from server:', data); // Log the data to check the response
      $('#selling-count').text(data.red_count);  // selling card
      $('#house-for-sell-count').text(data.blue_count);
      $('#sold-count').text(data.black_count);
      $('#building-for-green-count').text(data.green_count);
    },
    error: function(error) {
      console.error('Error fetching counts:', error);
      alert('Failed to load counts.');
    }
  });
  </script>

  /// change and apply adjustment
  <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
     
    <title>Mapping</title>
    <script src="https://openseadragon.github.io/openseadragon/openseadragon.min.js"></script>
    <style>
    
        body {
            font-family: Arial, sans-serif; 
           
            margin: 0;
            padding: 0;
            background-color: #f9f9f9;
        }

        header {
            width: 100%;
            background-color: #4CAF50;
            color: white;
            padding: 15px 0;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        header h1 {
            
            margin: 0;
            font-size: 24px;
            letter-spacing: 1px;
        }

        #container {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
        }

        .color-selection {
            margin: 20px 0;
            display: flex;
            gap: 20px;
        }

        .color-selection label {
            font-size: 14px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .color-selection input[type="radio"] {
            margin-right: 5px;
        }

        #viewer {
            width: 90%;
            height: 80vh;
            border: 1px solid #ccc;
            background-color: #fff;
            position: relative;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .marker {
            position: absolute;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            transform: translate(-50%, -50%);
            cursor: pointer;
        }

        .marker-tooltip {
    display: none;
    position: absolute;
    background-color: #333;
    color: #f7e5e5;
    padding: 10px; /* Increased padding for better spacing */
    border-radius: 5px;
    font-size: 12px;
    white-space: pre-wrap; /* Allow wrapping and preserve newlines  */
    width: auto; /* Adjust as needed or set a fixed width if required */
    max-width: 200px; /* Optional: Limit the width for readability */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Optional: Add a subtle shadow */
}

.marker:hover .marker-tooltip {
    display: block;
    top: -20px;
    left: 15px;
}


        .back-button {
            display: inline-block;
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            font-size: 16px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            transition: background-color 0.3s;
        }

        .back-button:hover {
            background-color: #45a049;
        }

        .title {
            font-size: 18px;
            color: #333;
            margin-bottom: 20px;
        }
       
              /*  change label color */
              #red{
               
                color: red;
              }
             #blue{
                color: blue;
             }
             #green{
                color: green;
             }
             #orange{
                color: orange;
             }
             #pink{
                color: pink;
             }
       
    </style>
</head>
<body>
    <body>
        <header>
            <h1>مكــتب كوجـــر للعــقارات</h1>
        </header>
    
        <div id="container">
            <!-- Checkbox to toggle between add marker and view only -->
            <div>
                <input type="checkbox" id="addMarkerCheckbox"> Enable Add Marker
            </div>
    
            <!-- Color Selection Section -->
            <div class="color-selection">
                <label id="red"><input type="radio" name="markerColor" value="red" checked>  قطعه عه ردي بو فروتنة </label>
                <label id="blue"><input type="radio" name="markerColor" value="blue"> قطعة عه ردي هاتية فروتن </label>
                <label id="green"><input type="radio" name="markerColor" value="green">قطــعة ســند </label>
                <label id="black"><input type="radio" name="markerColor" value="black">ملاحظــات</label>
                <label id="orange"><input type="radio" name="markerColor" value="orange">نيف قطــة</label>
                <label id="pink"><input type="radio" name="markerColor" value="pink">قطــعة عــدم </label>
            </div>
    
            <!-- Map Viewer -->
            <div id="viewer"></div>
    
            <!-- Back to Dashboard Button -->
            <a href="dashboard.html" class="back-button">Back to Dashboard</a>
        </div>
    
        <script>
            // Initialize OpenSeadragon viewer
 // Initialize OpenSeadragon viewer
// Initialize OpenSeadragon viewer
let viewer = OpenSeadragon({
    id: "viewer",
    prefixUrl: "https://openseadragon.github.io/openseadragon/images/",
    tileSources: {
        type: 'image',
        url: "image/compressed_output.JPG"
    },
    showNavigator: true,
    animationTime: 0.5,
    blendTime: 0.1,
    constrainDuringPan: true,
    maxZoomPixelRatio: 2,
    minZoomImageRatio: 0.5,
    zoomPerClick: 2,
});

// Function to get selected color for markers
function getSelectedColor() {
    const colorInput = document.querySelector('input[name="markerColor"]:checked');
    return colorInput ? colorInput.value : "red"; // Default to red
}

// Function to create a marker
function createMarker(x, y, tooltipText, color, save = true) {
    const marker = document.createElement("div");
    marker.classList.add("marker");
    marker.dataset.x = x;
    marker.dataset.y = y;
    marker.style.backgroundColor = color;

    // Tooltip for the marker
    if (tooltipText) {
        const tooltip = document.createElement("div");
        tooltip.classList.add("marker-tooltip");
        tooltip.textContent = tooltipText;
        marker.appendChild(tooltip);
    }

    // Marker click handler to delete the marker
    marker.addEventListener("click", (e) => {
        e.stopPropagation();
        const confirmDelete = confirm("Do you want to delete this marker?");
        if (confirmDelete) {
            deleteMarker(marker); // Remove marker from viewer
            deleteMarkerFromDatabase(marker.dataset.x, marker.dataset.y); // Remove marker from database
        }
    });

    // Append the marker to the viewer container
    document.getElementById("viewer").appendChild(marker);
    updateMarkerPosition(marker);

    // Save to the database if needed
    if (save) {
        const markerData = { x, y, tooltip: tooltipText, color };
        saveMarkerToDatabase(markerData); // Save to database
    }
}

// Function to update the marker position based on viewer coordinates
function updateMarkerPosition(marker) {
    const imagePoint = new OpenSeadragon.Point(
        parseFloat(marker.dataset.x),
        parseFloat(marker.dataset.y)
    );
    
    // Get the coordinates in viewport space and convert them to pixel space
    const viewportPoint = viewer.viewport.imageToViewportCoordinates(imagePoint);
    const pixelPoint = viewer.viewport.viewportToViewerElementCoordinates(viewportPoint);

    // Update the marker position in pixels relative to the viewer container
    marker.style.left = `${pixelPoint.x}px`;
    marker.style.top = `${pixelPoint.y}px`;
}

// Function to check if we are in "add marker" mode
function isAddMarkerMode() {
    return document.getElementById("addMarkerCheckbox").checked;
}

// Add marker to the map when clicked
function addMarker(imagePoint) {
    if (!isAddMarkerMode()) {
        return; // If not in add marker mode, return and do nothing
    }

    const tipText = prompt("Enter a tip for this marker:");
    if (tipText === null || tipText === "") return; // Cancel adding marker if no input

    const color = getSelectedColor(); // Get selected color
    createMarker(imagePoint.x, imagePoint.y, tipText, color);
}

// Handler for canvas clicks to create markers
viewer.addHandler("canvas-click", (event) => {
    const viewportPoint = viewer.viewport.pointFromPixel(event.position);
    const imagePoint = viewer.viewport.viewportToImageCoordinates(viewportPoint);
    addMarker(imagePoint);
});

// Load markers from the database when the viewer is opened
viewer.addHandler("open", () => {
    loadMarkersFromDatabase();
});

// Function to save marker to database
async function saveMarkerToDatabase(marker) {
    console.log("Sending marker data:", marker);  // Add this line to debug
    try {
        const response = await fetch('http://localhost:3000/save-maping', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(marker)
        });
        const result = await response.json();
        console.log(result.message);
    } catch (error) {
        console.error('Error saving marker:', error);
    }
}

// Function to load markers from the database
async function loadMarkersFromDatabase() {
    try {
        const response = await fetch('http://localhost:3000/get-markers');
        const markersFromDb = await response.json();
        markersFromDb.forEach(markerData => {
            createMarker(markerData.x_coordinate, markerData.y_coordinate, markerData.tooltip, markerData.color, false);
        });
    } catch (error) {
        console.error('Error loading markers:', error);
    }
}

// Function to delete marker from the database and the viewer
async function deleteMarkerFromDatabase(x, y) {
    // Round to 3 decimal places before sending
    const roundedX = Math.round(x * 1000) / 1000;
    const roundedY = Math.round(y * 1000) / 1000;

    console.log('Rounded coordinates sent to server:', { x: roundedX, y: roundedY });

    try {
        const response = await fetch('http://localhost:3000/delete-marker', {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ x: roundedX, y: roundedY })
        });

        if (!response.ok) {
            throw new Error('Failed to delete marker from database');
        }

        const data = await response.json();
        if (data.message === 'Marker deleted successfully') {
            console.log('Marker successfully deleted from database');
        } else {
            console.error('Error deleting marker from database:', data.message);
        }
    } catch (error) {
        console.error('Error:', error);
    }
}

// Function to remove marker from the viewer
function deleteMarker(marker) {
    // Remove the marker from the viewer
    marker.remove();
}

// Update marker positions whenever the viewer zooms or pans
viewer.addHandler("animation", () => {
    const markers = document.querySelectorAll(".marker");
    markers.forEach(marker => {
        updateMarkerPosition(marker); // Recalculate position for each marker
    });
});



        </script>
    </body>
    
</html>
